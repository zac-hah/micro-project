#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>
  
#include "TM4C1294NCPDT.h"
// #include "MyDefines.h"  // Your Definition Header File
  
void Setup_PWM(void);
void Setup_GPIO(void);
void Setup_ADC(void);
//void Setup_ADC_SS3_CH9();
//void Setup_UART0(void);
//void Setup_1294_80MHz(); // Setup SystemClock to 80MHz 


uint16_t voltage = 0; //voltage we set the sampling at 

//------------------------------------------------------------------------------
void DelayMS(int z){
	volatile int i, j;
	for (i = 0; i < z; i++){
		for (j = 0; j < 3180; j++){
		}
	}
}

/*
	//Port A pin 0 
void Setup_I2C(void){
	//Configure GPIO Module
	SYSCTL->RCGCGPIO |= (1<<0);
	while((SYSCTL ->PRGPIO & (1<<0)) != (1<<0)) {}
	GPIOA->DEN |= (1<<0);
	GPIOA->AFSEL |= (1<<0);
	GPIOA->PCTL |= (1<<0);
	GPIOA->ODR |= (1<<0);
	
	//Configure I2C Module 
	SYSCTL->RCGCI2C |= (); //
	while((SYSCTL ->PRI2C & ()) != ()){}
	I2C0->MCR |= ();
	I2C0->MTPR |= ():
	
	

}

*/


/*
void Setup_ADC(void){
	Setup_1294_80MHz();
	Setup_ADC_SS3_CH9(void);
	Setup_UART0();
		//Enabling GPIOD[7] for ADC
		SYSCTL->RCGCGPIO |= (1<<3); //Port (A = 0, B=1, C = 2, D = 3) 		//Enable Clock 
		while((SYSCTL->PRGPIO & (1<<3)) != (1<<3)){} // Clock Stabilize
		GPIOD->AMSEL |= (1<<7); 		// Enable Analog 
		GPIOD->AFSEL |= (1<<7);   		 //enable AFSEL bits to 1 for Port A[1,0] and PortE[4]
		GPIOD->DEN &=~ (1<<7);
		GPIOD->PUE |= (1<<7); //might or might not be necessary 
		
		// Enable the ADC clock - want to turn on ADC 0 
		SYSCTTL->RCGCADC |= (1<<0);
		while((SYSCTL->PRADC & (1<<0) != (1<<0)){};
		ADC0->PC = (0x01); // How fast you sample, data taking in, 0x01 = 125 ksps, 0x03 = 250ksps, 
		ADC0->SSPRI = 0x0123;   // Priority, Sample Sequencer, 0 first, 1 second, 2 third and 3, How many channels we using?
					//If one sequenver no need for priority, if more than one sequencer set 
					// Sample Sequencer 2 is turned on by the ACTSS portion
		ADC0->ACTSS &=~ (1<<2); //   Deactivating sample sequencer 2
		ADC0->EMUX &=~ (0x0F00); // Setting the trigger event for the software, manually or timer sampling
					 // Clearing Sample Sequencer 2
		ADC0->SSMUX0 = (0x04); //GPIO Pin channel 4 (based on the @@@)
		ADC0->SSCTL2 = (0x06); // Enables interrupts and turns on the sequence (for one channel) 
		ADC0->ACTSS |= (1<<2);
	}
}
*/

*/
void Setup_UART0(void){
}
*/


void Setup_PWM(void)
{
		// 1. Enable Clock for PWM Module
    SYSCTL->RCGCPWM |= 0x01;
    while((SYSCTL->PRPWM & 0x01) != 0x01 ){
		}
    // 2. Enable and Setup Clock Divider for PWM Timer
    PWM0->CC  = (1 << 8);           // CC[8]:USEPWMDIV
    PWM0->CC &= ~0x7;               // CC[2:0]=000 PWMDIV
    PWM0->CC |= (0x0);              // CC[2:0]=0x2 divider = /8
    // 3. Disable PWM Generator and Setup the Timer counting mode
    PWM0->_0_CTL = 0x00;            // Disable PWM Generator, and set to count down mode
    // 4. Configure LOAD (Period), CMP (Duty), GEN (PWM Mode) values
    PWM0->_0_LOAD = 10000;          // Setup the period of the PWM signal
    PWM0->_0_CMPA = 7;     // Setup the initial duty cycle
    PWM0->_0_GENA = (0x02 << 6 ) | (0x03 <<2); // ACTCMPAD=ActLow ACTLOAD=ActHigh
    // 5. Enable PWM Generator
    PWM0->_0_CTL |= 0x01;           // Enable PWM Generator
    // 6. Enable PWM Output
    PWM0->ENABLE = 0x01;            // Enable PWM0
}

// Which pins are you setting in the GPIO?
void Setup_GPIO(void)
{ 
    // GPIO Initialization and Configuration
    // 1. Enable Clock to the GPIO Modules (SYSCTL->RCGCGPIO)
    SYSCTL->RCGCGPIO |= (1<<5); //
    // allow time for clock to stabilize (SYSCTL->PRGPIO)
    while((SYSCTL->PRGPIO & (1<<5)) != (1<<5)){  //
		}
    // 2. Unlock GPIO only PD7, PF0 on TM4C123G; PD7, PE7 on TM4C1294 (GPIO->LOCK and GPIO->CR)
    // 3. Set Analog Mode Select bits for each Port (GPIO->AMSEL  0=digital, 1=analog)
		GPIOF_AHB->AMSEL = 0;
    // 4. Set Port Control Register for each Port (GPIO->PCTL, check the PCTL table)
		GPIOF_AHB->PCTL |= 0x6;
    // 5. Set Alternate Function Select bits for each Port (GPIO->AFSEL  0=regular I/O, 1=PCTL peripheral)
    GPIOF_AHB->AFSEL = 1<<0;
		// 6. Set Output pins for each Port (Direction of the Pins: GPIO->DIR  0=input, 1=output)
    GPIOF_AHB->DIR |= 1<<0;
		// 7. Set PUR bits (internal Pull-Up Resistor), PDR (Pull-Down Resistor), ODR (Open Drain) for each Port (0: disable, 1=enable)
    //GPIOF_AHB->ODR = 0;
		//GPIOF_AHB->PDR |= 1<<0;
		// 8. Set Digital ENable register on all GPIO pins (GPIO->DEN 0=disable, 1=enable)
		GPIOF_AHB->DEN |= 1<<0;
}

int main()
{
    Setup_PWM();
    Setup_GPIO();
   // Setup_ADC();
 
    while(1) {
        // Place your application code here
	
	`	\*
		//Runs Sampling
		//ADC0->PSSI |= (1<<2) //for sequencer2
		//while ((ADC0->RIS & (1<<2)) != (1<<2)) {}
		for(int i =0; i<1500; i++){};
		voltage = ADC0->SSFIF02 & 0xFFF; //read 12-bit result
		ADC0 ->ISC = (0x100);           //Finished looking at sample, get a new one 
		*/
    }
}
